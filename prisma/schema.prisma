// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// BetterAuth tables
model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]

  // Custom fields for insurance platform
  role        UserRole @default(BROKER)
  companyName String?
  phone       String?
  address     String?
  siretNumber String?
  isActive    Boolean  @default(true)

  // Relations
  projects Project[]
  messages Message[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

// Insurance platform models
enum UserRole {
  BROKER
  ADMIN
  UNDERWRITER
}

enum ProjectType {
  NEW_CONSTRUCTION
  RENOVATION
  EXTENSION
  MULTI_RISK
}

enum ProjectStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  ACTIVE
  COMPLETED
}

model Client {
  id        String   @id @default(cuid())
  firstName String
  lastName  String
  email     String
  phone     String?
  address   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  projects Project[]

  @@map("clients")
}

model Project {
  id          String        @id @default(cuid())
  title       String
  description String?
  type        ProjectType
  status      ProjectStatus @default(DRAFT)
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  address     String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  // Relations
  brokerId String @map("broker_id")
  broker   User   @relation(fields: [brokerId], references: [id])
  clientId String @map("client_id")
  client   Client @relation(fields: [clientId], references: [id])

  questionnaire Questionnaire?
  documents     Document[]
  contract      Contract?
  messages      Message[]

  @@map("projects")
}

model Questionnaire {
  id        String   @id @default(cuid())
  projectId String   @unique @map("project_id")
  responses Json // Store form responses as JSON
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("questionnaires")
}

model Document {
  id         String   @id @default(cuid())
  fileName   String
  fileUrl    String
  fileType   String
  fileSize   Int
  projectId  String   @map("project_id")
  uploadedAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("documents")
}

model Contract {
  id          String    @id @default(cuid())
  projectId   String    @unique @map("project_id")
  contractUrl String?
  signedAt    DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@map("contracts")
}

model Message {
  id        String   @id @default(cuid())
  content   String
  projectId String   @map("project_id")
  senderId  String   @map("sender_id")
  createdAt DateTime @default(now())

  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  sender  User    @relation(fields: [senderId], references: [id])

  @@map("messages")
}
